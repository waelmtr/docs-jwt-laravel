## Autogenerated by Scribe. DO NOT MODIFY.

name: Products
description: |-

  APIs for managing Products
endpoints:
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      groupName: Products
      groupDescription: |-

        APIs for managing Products
      subgroup: ''
      subgroupDescription: ''
      title: Register
      description: 'This endpoint is used to register a user to the system.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: true
        example: wael
        type: string
        custom: []
      email:
        name: email
        description: ''
        required: true
        example: ian@gmail.com
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: '12345678'
        type: string
        custom: []
    cleanBodyParameters:
      name: wael
      email: ian@gmail.com
      password: '12345678'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "User Successfully Registered",
          "user : {
           "name" : "...."
           "email" : "...."
           }
          }
        headers: []
        description: 'Successful Register'
        custom: []
      -
        status: 400
        content: |-
          {
          "field": [ "the Field is required" ]
          Example :  "name": [
            "The name field is required."
            ],
          }
        headers: []
        description: 'Failed Reqister'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: Products
      groupDescription: |-

        APIs for managing Products
      subgroup: ''
      subgroupDescription: ''
      title: Login
      description: 'This endpoint is used to login a user to the system.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: true
        example: ian@gmail.com
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: '12345678'
        type: string
        custom: []
    cleanBodyParameters:
      email: ian@gmail.com
      password: '12345678'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNjc3NDk0MjQxLCJleHAiOjE2Nzc0OTc4NDEsIm5iZiI6MTY3NzQ5NDI0MSwianRpIjoiNFpNVlVuQ0FoZ1E2UGt6UiIsInN1YiI6IjIiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.4NkkCmlRMy8qy2O3LtoB4f3_RMwa8tw6xlB1s5JRW4M",
          "token_type": "Bearer"
          "expire_in" : integer
          }
        headers: []
        description: 'Successful Login'
        custom: []
      -
        status: 401
        content: |-
          {
           "error": "Unauthorized"
          }
        headers: []
        description: 'Failed Login'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      groupName: Products
      groupDescription: |-

        APIs for managing Products
      subgroup: ''
      subgroupDescription: ''
      title: Logout
      description: 'this is end point for user logout'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer <your_token>'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "message": "User successfully logged out."
          }
        headers: []
        description: 'logout success'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/refresh
    metadata:
      groupName: Products
      groupDescription: |-

        APIs for managing Products
      subgroup: ''
      subgroupDescription: ''
      title: 'Refresh Token'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer <Token>'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               'access_token' => "new token",
               'token_type' => 'bearer',
              'expires_in' => 'auth()->factory()->getTTL() * 60'
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/profile
    metadata:
      groupName: Products
      groupDescription: |-

        APIs for managing Products
      subgroup: ''
      subgroupDescription: ''
      title: Profile
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer <Token>'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               'id' => "1",
               'name' => 'wael',
              'email' => 'wael@gmail.com'
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
